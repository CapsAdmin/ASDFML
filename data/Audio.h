 typedef int sfBool;
 typedef signed char sfInt8;
 typedef unsigned char sfUint8;
 typedef signed short sfInt16;
 typedef unsigned short sfUint16;
 typedef signed int sfInt32;
 typedef unsigned int sfUint32;
 typedef signed __int64 sfInt64;
 typedef unsigned __int64 sfUint64;
 typedef signed long long sfInt64;
 typedef unsigned long long sfUint64;
 typedef struct { sfInt64 microseconds;
 } sfTime;
 sfTime sfTime_Zero;
 float sfTime_asSeconds(sfTime time);
 sfInt32 sfTime_asMilliseconds(sfTime time);
 sfInt64 sfTime_asMicroseconds(sfTime time);
 sfTime sfSeconds(float amount);
 sfTime sfMilliseconds(sfInt32 amount);
 sfTime sfMicroseconds(sfInt64 amount);
 typedef struct sfClock sfClock;
 typedef struct sfMutex sfMutex;
 typedef struct sfThread sfThread;
 sfClock* sfClock_create(void);
 sfClock* sfClock_copy(sfClock* clock);
 void sfClock_destroy(sfClock* clock);
 sfTime sfClock_getElapsedTime(const sfClock* clock);
 sfTime sfClock_restart(sfClock* clock);
 typedef sfInt64 (*sfInputStreamReadFunc)(void* data, sfInt64 size, void* userData);
 typedef sfInt64 (*sfInputStreamSeekFunc)(sfInt64 position, void* userData);
 typedef sfInt64 (*sfInputStreamTellFunc)(void* userData);
 typedef sfInt64 (*sfInputStreamGetSizeFunc)(void* userData);
 typedef struct sfInputStream { sfInputStreamReadFunc read;
 sfInputStreamSeekFunc seek;
 sfInputStreamTellFunc tell;
 sfInputStreamGetSizeFunc getSize;
 void* userData;
 } sfInputStream;
 sfMutex* sfMutex_create(void);
 void sfMutex_destroy(sfMutex* mutex);
 void sfMutex_lock(sfMutex* mutex);
 void sfMutex_unlock(sfMutex* mutex);
 void sfSleep(sfTime duration);
 sfThread* sfThread_create(void (*function)(void*), void* userData);
 void sfThread_destroy(sfThread* thread);
 void sfThread_launch(sfThread* thread);
 void sfThread_wait(sfThread* thread);
 void sfThread_terminate(sfThread* thread);
 typedef struct { int x;
 int y;
 } sfVector2i;
 typedef struct { unsigned int x;
 unsigned int y;
 } sfVector2u;
 typedef struct { float x;
 float y;
 } sfVector2f;
 typedef struct { float x;
 float y;
 float z;
 } sfVector3f;
 void sfListener_setGlobalVolume(float volume);
 float sfListener_getGlobalVolume(void);
 void sfListener_setPosition(sfVector3f position);
 sfVector3f sfListener_getPosition();
 void sfListener_setDirection(sfVector3f orientation);
 sfVector3f sfListener_getDirection();
 typedef enum { sfStopped, sfPaused, sfPlaying } sfSoundStatus;
 typedef struct sfMusic sfMusic;
 typedef struct sfSound sfSound;
 typedef struct sfSoundBuffer sfSoundBuffer;
 typedef struct sfSoundBufferRecorder sfSoundBufferRecorder;
 typedef struct sfSoundRecorder sfSoundRecorder;
 typedef struct sfSoundStream sfSoundStream;
 sfMusic* sfMusic_createFromFile(const char* filename);
 sfMusic* sfMusic_createFromMemory(const void* data, size_t sizeInBytes);
 sfMusic* sfMusic_createFromStream(sfInputStream* stream);
 void sfMusic_destroy(sfMusic* music);
 void sfMusic_setLoop(sfMusic* music, sfBool loop);
 sfBool sfMusic_getLoop(const sfMusic* music);
 sfTime sfMusic_getDuration(const sfMusic* music);
 void sfMusic_play(sfMusic* music);
 void sfMusic_pause(sfMusic* music);
 void sfMusic_stop(sfMusic* music);
 unsigned int sfMusic_getChannelCount(const sfMusic* music);
 unsigned int sfMusic_getSampleRate(const sfMusic* music);
 sfSoundStatus sfMusic_getStatus(const sfMusic* music);
 sfTime sfMusic_getPlayingOffset(const sfMusic* music);
 void sfMusic_setPitch(sfMusic* music, float pitch);
 void sfMusic_setVolume(sfMusic* music, float volume);
 void sfMusic_setPosition(sfMusic* music, sfVector3f position);
 void sfMusic_setRelativeToListener(sfMusic* music, sfBool relative);
 void sfMusic_setMinDistance(sfMusic* music, float distance);
 void sfMusic_setAttenuation(sfMusic* music, float attenuation);
 void sfMusic_setPlayingOffset(sfMusic* music, sfUint32 timeOffset);
 float sfMusic_getPitch(const sfMusic* music);
 float sfMusic_getVolume(const sfMusic* music);
 sfVector3f sfMusic_getPosition(const sfMusic* music);
 sfBool sfMusic_isRelativeToListener(const sfMusic* music);
 float sfMusic_getMinDistance(const sfMusic* music);
 float sfMusic_getAttenuation(const sfMusic* music);
 sfSound* sfSound_create(void);
 sfSound* sfSound_copy(sfSound* sound);
 void sfSound_destroy(sfSound* sound);
 void sfSound_play(sfSound* sound);
 void sfSound_pause(sfSound* sound);
 void sfSound_stop(sfSound* sound);
 void sfSound_setBuffer(sfSound* sound, const sfSoundBuffer* buffer);
 const sfSoundBuffer* sfSound_getBuffer(const sfSound* sound);
 void sfSound_setLoop(sfSound* sound, sfBool loop);
 sfBool sfSound_getLoop(const sfSound* sound);
 sfSoundStatus sfSound_getStatus(const sfSound* sound);
 void sfSound_setPitch(sfSound* sound, float pitch);
 void sfSound_setVolume(sfSound* sound, float volume);
 void sfSound_setPosition(sfSound* sound, sfVector3f position);
 void sfSound_setRelativeToListener(sfSound* sound, sfBool relative);
 void sfSound_setMinDistance(sfSound* sound, float distance);
 void sfSound_setAttenuation(sfSound* sound, float attenuation);
 void sfSound_setPlayingOffset(sfSound* sound, sfTime timeOffset);
 float sfSound_getPitch(const sfSound* sound);
 float sfSound_getVolume(const sfSound* sound);
 sfVector3f sfSound_getPosition(const sfSound* sound);
 sfBool sfSound_isRelativeToListener(const sfSound* sound);
 float sfSound_getMinDistance(const sfSound* sound);
 float sfSound_getAttenuation(const sfSound* sound);
 sfTime sfSound_getPlayingOffset(const sfSound* sound);
 sfSoundBuffer* sfSoundBuffer_createFromFile(const char* filename);
 sfSoundBuffer* sfSoundBuffer_createFromMemory(const void* data, size_t sizeInBytes);
 sfSoundBuffer* sfSoundBuffer_createFromStream(sfInputStream* stream);
 sfSoundBuffer* sfSoundBuffer_createFromSamples(const sfInt16* samples, size_t sampleCount, unsigned int channelCount, unsigned int sampleRate);
 sfSoundBuffer* sfSoundBuffer_copy(sfSoundBuffer* soundBuffer);
 void sfSoundBuffer_destroy(sfSoundBuffer* soundBuffer);
 sfBool sfSoundBuffer_saveToFile(const sfSoundBuffer* soundBuffer, const char* filename);
 const sfInt16* sfSoundBuffer_getSamples(const sfSoundBuffer* soundBuffer);
 size_t sfSoundBuffer_getSampleCount(const sfSoundBuffer* soundBuffer);
 unsigned int sfSoundBuffer_getSampleRate(const sfSoundBuffer* soundBuffer);
 unsigned int sfSoundBuffer_getChannelCount(const sfSoundBuffer* soundBuffer);
 sfTime sfSoundBuffer_getDuration(const sfSoundBuffer* soundBuffer);
 sfSoundBufferRecorder* sfSoundBufferRecorder_create(void);
 void sfSoundBufferRecorder_destroy(sfSoundBufferRecorder* soundBufferRecorder);
 void sfSoundBufferRecorder_start(sfSoundBufferRecorder* soundBufferRecorder, unsigned int sampleRate);
 void sfSoundBufferRecorder_stop(sfSoundBufferRecorder* soundBufferRecorder);
 unsigned int sfSoundBufferRecorder_getSampleRate(const sfSoundBufferRecorder* soundBufferRecorder);
 const sfSoundBuffer* sfSoundBufferRecorder_getBuffer(const sfSoundBufferRecorder* soundBufferRecorder);
 typedef sfBool (*sfSoundRecorderStartCallback)(void*);
 typedef sfBool (*sfSoundRecorderProcessCallback)(const sfInt16*, size_t, void*);
 typedef void (*sfSoundRecorderStopCallback)(void*);
 sfSoundRecorder* sfSoundRecorder_create(sfSoundRecorderStartCallback onStart, sfSoundRecorderProcessCallback onProcess, sfSoundRecorderStopCallback onStop, void* userData);
 void sfSoundRecorder_destroy(sfSoundRecorder* soundRecorder);
 void sfSoundRecorder_start(sfSoundRecorder* soundRecorder, unsigned int sampleRate);
 void sfSoundRecorder_stop(sfSoundRecorder* soundRecorder);
 unsigned int sfSoundRecorder_getSampleRate(const sfSoundRecorder* soundRecorder);
 sfBool sfSoundRecorder_isAvailable(void);
 