 typedef struct sfContext sfContext;
 typedef struct sfWindow sfWindow;
 sfContext* sfContext_create(void);
 void sfContext_destroy(sfContext* context);
 void sfContext_setActive(sfContext* context, sfBool active);
 enum { sfJoystickCount = 8, sfJoystickButtonCount = 32, sfJoystickAxisCount = 8 };
 typedef enum { sfJoystickX, sfJoystickY, sfJoystickZ, sfJoystickR, sfJoystickU, sfJoystickV, sfJoystickPovX, sfJoystickPovY } sfJoystickAxis;
 sfBool sfJoystick_isConnected(unsigned int joystick);
 unsigned int sfJoystick_getButtonCount(unsigned int joystick);
 sfBool sfJoystick_hasAxis(unsigned int joystick, sfJoystickAxis axis);
 sfBool sfJoystick_isButtonPressed(unsigned int joystick, unsigned int button);
 float sfJoystick_getAxisPosition(unsigned int joystick, sfJoystickAxis axis);
 void sfJoystick_update(void);
 typedef enum { sfKeyA, sfKeyB, sfKeyC, sfKeyD, sfKeyE, sfKeyF, sfKeyG, sfKeyH, sfKeyI, sfKeyJ, sfKeyK, sfKeyL, sfKeyM, sfKeyN, sfKeyO, sfKeyP, sfKeyQ, sfKeyR, sfKeyS, sfKeyT, sfKeyU, sfKeyV, sfKeyW, sfKeyX, sfKeyY, sfKeyZ, sfKeyNum0, sfKeyNum1, sfKeyNum2, sfKeyNum3, sfKeyNum4, sfKeyNum5, sfKeyNum6, sfKeyNum7, sfKeyNum8, sfKeyNum9, sfKeyEscape, sfKeyLControl, sfKeyLShift, sfKeyLAlt, sfKeyLSystem, sfKeyRControl, sfKeyRShift, sfKeyRAlt, sfKeyRSystem, sfKeyMenu, sfKeyLBracket, sfKeyRBracket, sfKeySemiColon, sfKeyComma, sfKeyPeriod, sfKeyQuote, sfKeySlash, sfKeyBackSlash, sfKeyTilde, sfKeyEqual, sfKeyDash, sfKeySpace, sfKeyReturn, sfKeyBack, sfKeyTab, sfKeyPageUp, sfKeyPageDown, sfKeyEnd, sfKeyHome, sfKeyInsert, sfKeyDelete, sfKeyAdd, sfKeySubtract, sfKeyMultiply, sfKeyDivide, sfKeyLeft, sfKeyRight, sfKeyUp, sfKeyDown, sfKeyNumpad0, sfKeyNumpad1, sfKeyNumpad2, sfKeyNumpad3, sfKeyNumpad4, sfKeyNumpad5, sfKeyNumpad6, sfKeyNumpad7, sfKeyNumpad8, sfKeyNumpad9, sfKeyF1, sfKeyF2, sfKeyF3, sfKeyF4, sfKeyF5, sfKeyF6, sfKeyF7, sfKeyF8, sfKeyF9, sfKeyF10, sfKeyF11, sfKeyF12, sfKeyF13, sfKeyF14, sfKeyF15, sfKeyPause, sfKeyCount } sfKeyCode;
 sfBool sfKeyboard_isKeyPressed(sfKeyCode key);
 typedef enum { sfMouseLeft, sfMouseRight, sfMouseMiddle, sfMouseXButton1, sfMouseXButton2, sfMouseButtonCount } sfMouseButton;
 sfBool sfMouse_isButtonPressed(sfMouseButton button);
 sfVector2i sfMouse_getPosition(const sfWindow* relativeTo);
 void sfMouse_setPosition(sfVector2i position, const sfWindow* relativeTo);
 typedef enum { sfEvtClosed, sfEvtResized, sfEvtLostFocus, sfEvtGainedFocus, sfEvtTextEntered, sfEvtKeyPressed, sfEvtKeyReleased, sfEvtMouseWheelMoved, sfEvtMouseButtonPressed, sfEvtMouseButtonReleased, sfEvtMouseMoved, sfEvtMouseEntered, sfEvtMouseLeft, sfEvtJoystickButtonPressed, sfEvtJoystickButtonReleased, sfEvtJoystickMoved, sfEvtJoystickConnected, sfEvtJoystickDisconnected } sfEventType;
 struct sfKeyEvent { sfEventType type;
 sfKeyCode code;
 sfBool alt;
 sfBool control;
 sfBool shift;
 sfBool system;
 };
 struct sfTextEvent { sfEventType type;
 sfUint32 unicode;
 };
 struct sfMouseMoveEvent { sfEventType type;
 int x;
 int y;
 };
 struct sfMouseButtonEvent { sfEventType type;
 sfMouseButton button;
 int x;
 int y;
 };
 struct sfMouseWheelEvent { sfEventType type;
 int delta;
 int x;
 int y;
 };
 struct sfJoystickMoveEvent { sfEventType type;
 unsigned int joystickId;
 sfJoystickAxis axis;
 float position;
 };
 struct sfJoystickButtonEvent { sfEventType type;
 unsigned int joystickId;
 unsigned int button;
 };
 struct sfJoystickConnectEvent { sfEventType type;
 unsigned int joystickId;
 };
 struct sfSizeEvent { sfEventType type;
 unsigned int width;
 unsigned int height;
 };
 typedef union { sfEventType type;
 struct sfSizeEvent size;
 struct sfKeyEvent key;
 struct sfTextEvent text;
 struct sfMouseMoveEvent mouseMove;
 struct sfMouseButtonEvent mouseButton;
 struct sfMouseWheelEvent mouseWheel;
 struct sfJoystickMoveEvent joystickMove;
 struct sfJoystickButtonEvent joystickButton;
 struct sfJoystickConnectEvent joystickConnect;
 } sfEvent;
 typedef struct { unsigned int width;
 unsigned int height;
 unsigned int bitsPerPixel;
 } sfVideoMode;
 sfVideoMode sfVideoMode_getDesktopMode(void);
 const sfVideoMode* sfVideoMode_getFullscreenModes(size_t* Count);
 sfBool sfVideoMode_isValid(sfVideoMode mode);
 struct HWND__;
 typedef struct HWND__* sfWindowHandle;
 typedef unsigned long sfWindowHandle;
 typedef void* sfWindowHandle;
 enum { sfNone = 0, sfTitlebar = 1 << 0, sfResize = 1 << 1, sfClose = 1 << 2, sfFullscreen = 1 << 3, sfDefaultStyle = sfTitlebar | sfResize | sfClose };
 typedef struct { unsigned int depthBits;
 unsigned int stencilBits;
 unsigned int antialiasingLevel;
 unsigned int majorVersion;
 unsigned int minorVersion;
 } sfContextSettings;
 sfWindow* sfWindow_create(sfVideoMode mode, const char* title, sfUint32 style, const sfContextSettings* settings);
 sfWindow* sfWindow_createFromHandle(sfWindowHandle handle, const sfContextSettings* settings);
 void sfWindow_destroy(sfWindow* window);
 void sfWindow_close(sfWindow* window);
 sfBool sfWindow_isOpen(const sfWindow* window);
 sfContextSettings sfWindow_getSettings(const sfWindow* window);
 sfBool sfWindow_pollEvent(sfWindow* window, sfEvent* event);
 sfBool sfWindow_waitEvent(sfWindow* window, sfEvent* event);
 sfVector2i sfWindow_getPosition(const sfWindow* window);
 void sfWindow_setPosition(sfWindow* window, sfVector2i position);
 sfVector2u sfWindow_getSize(const sfWindow* window);
 void sfWindow_setSize(sfWindow* window, sfVector2u size);
 void sfWindow_setTitle(sfWindow* window, const char* title);
 void sfWindow_setIcon(sfWindow* window, unsigned int width, unsigned int height, const sfUint8* pixels);
 void sfWindow_setVisible(sfWindow* window, sfBool visible);
 void sfWindow_setMouseCursorVisible(sfWindow* window, sfBool visible);
 void sfWindow_setVerticalSyncEnabled(sfWindow* window, sfBool enabled);
 void sfWindow_setKeyRepeatEnabled(sfWindow* window, sfBool enabled);
 sfBool sfWindow_setActive(sfWindow* window, sfBool active);
 void sfWindow_display(sfWindow* window);
 void sfWindow_setFramerateLimit(sfWindow* window, unsigned int limit);
 void sfWindow_setJoystickThreshold(sfWindow* window, float threshold);
 sfWindowHandle sfWindow_getSystemHandle(const sfWindow* window);
 typedef enum { sfBlendAlpha, sfBlendAdd, sfBlendMultiply, sfBlendNone } sfBlendMode;
 typedef struct { sfUint8 r;
 sfUint8 g;
 sfUint8 b;
 sfUint8 a;
 } sfColor;
 sfColor sfBlack;
 sfColor sfWhite;
 sfColor sfRed;
 sfColor sfGreen;
 sfColor sfBlue;
 sfColor sfYellow;
 sfColor sfMagenta;
 sfColor sfCyan;
 sfColor sfTransparent;
 sfColor sfColor_fromRGB(sfUint8 red, sfUint8 green, sfUint8 blue);
 sfColor sfColor_fromRGBA(sfUint8 red, sfUint8 green, sfUint8 blue, sfUint8 alpha);
 sfColor sfColor_add(sfColor color1, sfColor color2);
 sfColor sfColor_modulate(sfColor color1, sfColor color2);
 typedef struct { float left;
 float top;
 float width;
 float height;
 } sfFloatRect;
 typedef struct { int left;
 int top;
 int width;
 int height;
 } sfIntRect;
 sfBool sfFloatRect_contains(const sfFloatRect* rect, float x, float y);
 sfBool sfIntRect_contains(const sfIntRect* rect, int x, int y);
 sfBool sfFloatRect_intersects(const sfFloatRect* rect1, const sfFloatRect* rect2, sfFloatRect* intersection);
 sfBool sfIntRect_intersects(const sfIntRect* rect1, const sfIntRect* rect2, sfIntRect* intersection);
 typedef struct sfCircleShape sfCircleShape;
 typedef struct sfConvexShape sfConvexShape;
 typedef struct sfFont sfFont;
 typedef struct sfImage sfImage;
 typedef struct sfShader sfShader;
 typedef struct sfRectangleShape sfRectangleShape;
 typedef struct sfRenderTexture sfRenderTexture;
 typedef struct sfRenderWindow sfRenderWindow;
 typedef struct sfShape sfShape;
 typedef struct sfSprite sfSprite;
 typedef struct sfText sfText;
 typedef struct sfTexture sfTexture;
 typedef struct sfTransform sfTransform;
 typedef struct sfTransformable sfTransformable;
 typedef struct sfVertexArray sfVertexArray;
 typedef struct sfView sfView;
 sfCircleShape* sfCircleShape_create(void);
 sfCircleShape* sfCircleShape_copy(sfCircleShape* shape);
 void sfCircleShape_destroy(sfCircleShape* shape);
 void sfCircleShape_setPosition(sfCircleShape* shape, sfVector2f position);
 void sfCircleShape_setRotation(sfCircleShape* shape, float angle);
 void sfCircleShape_setScale(sfCircleShape* shape, sfVector2f scale);
 void sfCircleShape_setOrigin(sfCircleShape* shape, sfVector2f origin);
 sfVector2f sfCircleShape_getPosition(const sfCircleShape* shape);
 float sfCircleShape_getRotation(const sfCircleShape* shape);
 sfVector2f sfCircleShape_GetScale(const sfCircleShape* shape);
 sfVector2f sfCircleShape_GetOrigin(const sfCircleShape* shape);
 void sfCircleShape_move(sfCircleShape* shape, sfVector2f offset);
 void sfCircleShape_rotate(sfCircleShape* shape, float angle);
 void sfCircleShape_scale(sfCircleShape* shape, sfVector2f factors);
 const sfTransform* sfCircleShape_getTransform(const sfCircleShape* shape);
 const sfTransform* sfCircleShape_getInverseTransform(const sfCircleShape* shape);
 void sfCircleShape_setTexture(sfCircleShape* shape, const sfTexture* texture, sfBool resetRect);
 void sfCircleShape_setTextureRect(sfCircleShape* shape, sfIntRect rect);
 void sfCircleShape_setFillColor(sfCircleShape* shape, sfColor color);
 void sfCircleShape_setOutlineColor(sfCircleShape* shape, sfColor color);
 void sfCircleShape_setOutlineThickness(sfCircleShape* shape, float thickness);
 const sfTexture* sfCircleShape_getTexture(const sfCircleShape* shape);
 sfIntRect sfCircleShape_getTextureRect(const sfCircleShape* shape);
 sfColor sfCircleShape_getFillColor(const sfCircleShape* shape);
 sfColor sfCircleShape_getOutlineColor(const sfCircleShape* shape);
 float sfCircleShape_getOutlineThickness(const sfCircleShape* shape);
 unsigned int sfCircleShape_getPointCount(const sfCircleShape* shape);
 sfVector2f sfCircleShape_getPoint(const sfCircleShape* shape, unsigned int index);
 void sfCircleShape_setRadius(sfCircleShape* shape, float radius);
 float sfCircleShape_getRadius(const sfCircleShape* shape);
 void sfCircleShape_setPointCount(sfCircleShape* shape, unsigned int count);
 sfFloatRect sfCircleShape_getLocalBounds(const sfCircleShape* shape);
 sfFloatRect sfCircleShape_getGlobalBounds(const sfCircleShape* shape);
 sfConvexShape* sfConvexShape_create(void);
 sfConvexShape* sfConvexShape_copy(sfConvexShape* shape);
 void sfConvexShape_destroy(sfConvexShape* shape);
 void sfConvexShape_setPosition(sfConvexShape* shape, sfVector2f position);
 void sfConvexShape_setRotation(sfConvexShape* shape, float angle);
 void sfConvexShape_setScale(sfConvexShape* shape, sfVector2f scale);
 void sfConvexShape_setOrigin(sfConvexShape* shape, sfVector2f origin);
 sfVector2f sfConvexShape_getPosition(const sfConvexShape* shape);
 float sfConvexShape_getRotation(const sfConvexShape* shape);
 sfVector2f sfConvexShape_getScale(const sfConvexShape* shape);
 sfVector2f sfConvexShape_getOrigin(const sfConvexShape* shape);
 void sfConvexShape_move(sfConvexShape* shape, sfVector2f offset);
 void sfConvexShape_rotate(sfConvexShape* shape, float angle);
 void sfConvexShape_scale(sfConvexShape* shape, sfVector2f factors);
 const sfTransform* sfConvexShape_getTransform(const sfConvexShape* shape);
 const sfTransform* sfConvexShape_getInverseTransform(const sfConvexShape* shape);
 void sfConvexShape_setTexture(sfConvexShape* shape, const sfTexture* texture, sfBool resetRect);
 void sfConvexShape_setTextureRect(sfConvexShape* shape, sfIntRect rect);
 void sfConvexShape_setFillColor(sfConvexShape* shape, sfColor color);
 void sfConvexShape_setOutlineColor(sfConvexShape* shape, sfColor color);
 void sfConvexShape_setOutlineThickness(sfConvexShape* shape, float thickness);
 const sfTexture* sfConvexShape_getTexture(const sfConvexShape* shape);
 sfIntRect sfConvexShape_getTextureRect(const sfConvexShape* shape);
 sfColor sfConvexShape_getFillColor(const sfConvexShape* shape);
 sfColor sfConvexShape_getOutlineColor(const sfConvexShape* shape);
 float sfConvexShape_getOutlineThickness(const sfConvexShape* shape);
 unsigned int sfConvexShape_getPointCount(const sfConvexShape* shape);
 sfVector2f sfConvexShape_getPoint(const sfConvexShape* shape, unsigned int index);
 void sfConvexShape_setPointCount(sfConvexShape* shape, unsigned int count);
 void sfConvexShape_setPoint(sfConvexShape* shape, unsigned int index, sfVector2f point);
 sfFloatRect sfConvexShape_getLocalBounds(const sfConvexShape* shape);
 sfFloatRect sfConvexShape_getGlobalBounds(const sfConvexShape* shape);
 typedef struct { int advance;
 sfIntRect bounds;
 sfIntRect textureRect;
 } sfGlyph;
 sfFont* sfFont_createFromFile(const char* filename);
 sfFont* sfFont_createFromMemory(const void* data, size_t sizeInBytes);
 sfFont* sfFont_createFromStream(sfInputStream* stream);
 sfFont* sfFont_copy(sfFont* font);
 void sfFont_destroy(sfFont* font);
 sfGlyph sfFont_getGlyph(sfFont* font, sfUint32 codePoint, unsigned int characterSize, sfBool bold);
 int sfFont_getKerning(sfFont* font, sfUint32 first, sfUint32 second, unsigned int characterSize);
 int sfFont_getLineSpacing(sfFont* font, unsigned int characterSize);
 const sfTexture* sfFont_getTexture(sfFont* font, unsigned int characterSize);
 const sfFont* sfFont_getDefaultFont(void);
 sfImage* sfImage_create(unsigned int width, unsigned int height);
 sfImage* sfImage_createFromColor(unsigned int width, unsigned int height, sfColor color);
 sfImage* sfImage_createFromPixels(unsigned int width, unsigned int height, const sfUint8* pixels);
 sfImage* sfImage_createFromFile(const char* filename);
 sfImage* sfImage_createFromMemory(const void* data, size_t size);
 sfImage* sfImage_createFromStream(sfInputStream* stream);
 sfImage* sfImage_copy(sfImage* image);
 void sfImage_destroy(sfImage* image);
 sfBool sfImage_saveToFile(const sfImage* image, const char* filename);
 sfVector2u sfImage_getSize(const sfImage* image);
 void sfImage_createMaskFromColor(sfColor color, sfUint8 alpha);
 void sfImage_copyImage(sfImage* image, const sfImage* source, unsigned int destX, unsigned int destY, sfIntRect sourceRect, sfBool applyAlpha);
 void sfImage_setPixel(sfImage* image, unsigned int x, unsigned int y, sfColor color);
 sfColor sfImage_getPixel(const sfImage* image, unsigned int x, unsigned int y);
 const sfUint8* sfImage_getPixelsPtr(const sfImage* image);
 void sfImage_flipHorizontally(sfImage* image);
 void sfImage_flipVertically(sfImage* image);
 typedef enum { sfPoints, sfLines, sfLinesStrip, sfTriangles, sfTrianglesStrip, sfTrianglesFan, sfQuads } sfPrimitiveType;
 sfRectangleShape* sfRectangleShape_Create(void);
 sfRectangleShape* sfRectangleShape_Copy(sfRectangleShape* shape);
 void sfRectangleShape_Destroy(sfRectangleShape* shape);
 void sfRectangleShape_SetPosition(sfRectangleShape* shape, sfVector2f position);
 void sfRectangleShape_SetRotation(sfRectangleShape* shape, float angle);
 void sfRectangleShape_SetScale(sfRectangleShape* shape, sfVector2f scale);
 void sfRectangleShape_SetOrigin(sfRectangleShape* shape, sfVector2f origin);
 sfVector2f sfRectangleShape_GetPosition(const sfRectangleShape* shape);
 float sfRectangleShape_GetRotation(const sfRectangleShape* shape);
 sfVector2f sfRectangleShape_GetScale(const sfRectangleShape* shape);
 sfVector2f sfRectangleShape_GetOrigin(const sfRectangleShape* shape);
 void sfRectangleShape_Move(sfRectangleShape* shape, sfVector2f offset);
 void sfRectangleShape_Rotate(sfRectangleShape* shape, float angle);
 void sfRectangleShape_Scale(sfRectangleShape* shape, sfVector2f factors);
 const sfTransform* sfRectangleShape_GetTransform(const sfRectangleShape* shape);
 const sfTransform* sfRectangleShape_GetInverseTransform(const sfRectangleShape* shape);
 void sfRectangleShape_SetTexture(sfRectangleShape* shape, const sfTexture* texture, sfBool resetRect);
 void sfRectangleShape_SetTextureRect(sfRectangleShape* shape, sfIntRect rect);
 void sfRectangleShape_SetFillColor(sfRectangleShape* shape, sfColor color);
 void sfRectangleShape_SetOutlineColor(sfRectangleShape* shape, sfColor color);
 void sfRectangleShape_SetOutlineThickness(sfRectangleShape* shape, float thickness);
 const sfTexture* sfRectangleShape_GetTexture(const sfRectangleShape* shape);
 sfIntRect sfRectangleShape_GetTextureRect(const sfRectangleShape* shape);
 sfColor sfRectangleShape_GetFillColor(const sfRectangleShape* shape);
 sfColor sfRectangleShape_GetOutlineColor(const sfRectangleShape* shape);
 float sfRectangleShape_GetOutlineThickness(const sfRectangleShape* shape);
 unsigned int sfRectangleShape_GetPointCount(const sfRectangleShape* shape);
 sfVector2f sfRectangleShape_GetPoint(const sfRectangleShape* shape, unsigned int index);
 void sfRectangleShape_SetSize(sfRectangleShape* shape, sfVector2f size);
 sfVector2f sfRectangleShape_GetSize(const sfRectangleShape* shape);
 sfFloatRect sfRectangleShape_GetLocalBounds(const sfRectangleShape* shape);
 sfFloatRect sfRectangleShape_GetGlobalBounds(const sfRectangleShape* shape);
 typedef struct { sfBlendMode blendMode;
 sfTransform* transform;
 const sfTexture* texture;
 const sfShader* shader;
 } sfRenderStates;
 typedef struct { sfVector2f position;
 sfColor color;
 sfVector2f texCoords;
 } sfVertex;
 sfRenderWindow* sfRenderWindow_create(sfVideoMode mode, const char* title, sfUint32 style, const sfContextSettings* settings);
 sfRenderWindow* sfRenderWindow_createFromHandle(sfWindowHandle handle, const sfContextSettings* settings);
 void sfRenderWindow_destroy(sfRenderWindow* renderWindow);
 void sfRenderWindow_close(sfRenderWindow* renderWindow);
 sfBool sfRenderWindow_isOpen(const sfRenderWindow* renderWindow);
 sfContextSettings sfRenderWindow_getSettings(const sfRenderWindow* renderWindow);
 sfBool sfRenderWindow_pollEvent(sfRenderWindow* renderWindow, sfEvent* event);
 sfBool sfRenderWindow_waitEvent(sfRenderWindow* renderWindow, sfEvent* event);
 sfVector2i sfRenderWindow_getPosition(const sfRenderWindow* renderWindow);
 void sfRenderWindow_setPosition(sfRenderWindow* renderWindow, sfVector2i position);
 sfVector2u sfRenderWindow_getSize(const sfRenderWindow* renderWindow);
 void sfRenderWindow_setSize(sfRenderWindow* renderWindow, sfVector2u size);
 void sfRenderWindow_setTitle(sfRenderWindow* renderWindow, const char* title);
 void sfRenderWindow_setIcon(sfRenderWindow* renderWindow, unsigned int width, unsigned int height, const sfUint8* pixels);
 void sfRenderWindow_setVisible(sfRenderWindow* renderWindow, sfBool visible);
 void sfRenderWindow_setMouseCursorVisible(sfRenderWindow* renderWindow, sfBool show);
 void sfRenderWindow_setVerticalSyncEnabled(sfRenderWindow* renderWindow, sfBool enabled);
 void sfRenderWindow_setKeyRepeatEnabled(sfRenderWindow* renderWindow, sfBool enabled);
 sfBool sfRenderWindow_setActive(sfRenderWindow* renderWindow, sfBool active);
 void sfRenderWindow_display(sfRenderWindow* renderWindow);
 void sfRenderWindow_setFramerateLimit(sfRenderWindow* renderWindow, unsigned int limit);
 void sfRenderWindow_setJoystickThreshold(sfRenderWindow* renderWindow, float threshold);
 sfWindowHandle sfRenderWindow_getSystemHandle(const sfRenderWindow* renderWindow);
 void sfRenderWindow_clear(sfRenderWindow* renderWindow, sfColor color);
 void sfRenderWindow_setView(sfRenderWindow* renderWindow, const sfView* view);
 const sfView* sfRenderWindow_getView(const sfRenderWindow* renderWindow);
 const sfView* sfRenderWindow_getDefaultView(const sfRenderWindow* renderWindow);
 sfIntRect sfRenderWindow_getViewport(const sfRenderWindow* renderWindow, const sfView* view);
 sfVector2f sfRenderWindow_convertCoords(const sfRenderWindow* renderWindow, sfVector2i point, const sfView* targetView);
 void sfRenderWindow_drawSprite(sfRenderWindow* renderWindow, const sfSprite* object, const sfRenderStates* states);
 void sfRenderWindow_drawText(sfRenderWindow* renderWindow, const sfText* object, const sfRenderStates* states);
 void sfRenderWindow_drawShape(sfRenderWindow* renderWindow, const sfShape* object, const sfRenderStates* states);
 void sfRenderWindow_drawCircleShape(sfRenderWindow* renderWindow, const sfCircleShape* object, const sfRenderStates* states);
 void sfRenderWindow_drawConvexShape(sfRenderWindow* renderWindow, const sfConvexShape* object, const sfRenderStates* states);
 void sfRenderWindow_drawRectangleShape(sfRenderWindow* renderWindow, const sfRectangleShape* object, const sfRenderStates* states);
 void sfRenderWindow_drawVertexArray(sfRenderWindow* renderWindow, const sfVertexArray* object, const sfRenderStates* states);
 void sfRenderWindow_drawPrimitives(sfRenderWindow* renderWindow, const sfVertex* vertices, unsigned int vertexCount, sfPrimitiveType type, const sfRenderStates* states);
 void sfRenderWindow_pushGLStates(sfRenderWindow* renderWindow);
 void sfRenderWindow_popGLStates(sfRenderWindow* renderWindow);
 void sfRenderWindow_resetGLStates(sfRenderWindow* renderWindow);
 sfImage* sfRenderWindow_capture(const sfRenderWindow* renderWindow);
 sfRenderTexture* sfRenderTexture_create(unsigned int width, unsigned int height, sfBool depthBuffer);
 void sfRenderTexture_destroy(sfRenderTexture* renderTexture);
 sfVector2u sfRenderTexture_getSize(const sfRenderTexture* renderTexture);
 sfBool sfRenderTexture_setActive(sfRenderTexture* renderTexture, sfBool active);
 void sfRenderTexture_display(sfRenderTexture* renderTexture);
 void sfRenderTexture_clear(sfRenderTexture* renderTexture, sfColor color);
 void sfRenderTexture_setView(sfRenderTexture* renderTexture, const sfView* view);
 const sfView* sfRenderTexture_getView(const sfRenderTexture* renderTexture);
 const sfView* sfRenderTexture_getDefaultView(const sfRenderTexture* renderTexture);
 sfIntRect sfRenderTexture_getViewport(const sfRenderTexture* renderTexture, const sfView* view);
 sfVector2f sfRenderTexture_convertCoords(const sfRenderTexture* renderTexture, sfVector2i point, const sfView* targetView);
 void sfRenderTexture_drawSprite(sfRenderTexture* renderTexture, const sfSprite* object, const sfRenderStates* states);
 void sfRenderTexture_drawText(sfRenderTexture* renderTexture, const sfText* object, const sfRenderStates* states);
 void sfRenderTexture_drawShape(sfRenderTexture* renderTexture, const sfShape* object, const sfRenderStates* states);
 void sfRenderTexture_drawCircleShape(sfRenderTexture* renderTexture, const sfCircleShape* object, const sfRenderStates* states);
 void sfRenderTexture_drawConvexShape(sfRenderTexture* renderTexture, const sfConvexShape* object, const sfRenderStates* states);
 void sfRenderTexture_drawRectangleShape(sfRenderTexture* renderTexture, const sfRectangleShape* object, const sfRenderStates* states);
 void sfRenderTexture_drawVertexArray(sfRenderTexture* renderTexture, const sfVertexArray* object, const sfRenderStates* states);
 void sfRenderTexture_drawPrimitives(sfRenderTexture* renderTexture, const sfVertex* vertices, unsigned int vertexCount, sfPrimitiveType type, const sfRenderStates* states);
 void sfRenderTexture_pushGLStates(sfRenderTexture* renderTexture);
 void sfRenderTexture_popGLStates(sfRenderTexture* renderTexture);
 void sfRenderTexture_resetGLStates(sfRenderTexture* renderTexture);
 const sfTexture* sfRenderTexture_getTexture(const sfRenderTexture* renderTexture);
 void sfRenderTexture_setSmooth(sfRenderTexture* renderTexture, sfBool smooth);
 sfBool sfRenderTexture_isSmooth(const sfRenderTexture* renderTexture);
 sfShader* sfShader_createFromFile(const char* vertexShaderFilename, const char* fragmentShaderFilename);
 sfShader* sfShader_createFromMemory(const char* vertexShader, const char* fragmentShader);
 sfShader* sfShader_createFromStream(sfInputStream* vertexShaderStream, sfInputStream* fragmentShaderStream);
 void sfShader_destroy(sfShader* shader);
 void sfShader_setFloatParameter(sfShader* shader, const char* name, float x);
 void sfShader_setFloat2Parameter(sfShader* shader, const char* name, float x, float y);
 void sfShader_setFloat3Parameter(sfShader* shader, const char* name, float x, float y, float z);
 void sfShader_setFloat4Parameter(sfShader* shader, const char* name, float x, float y, float z, float w);
 void sfShader_setVector2Parameter(sfShader* shader, const char* name, sfVector2f vector);
 void sfShader_setVector3Parameter(sfShader* shader, const char* name, sfVector3f vector);
 void sfShader_setColorParameter(sfShader* shader, const char* name, sfColor color);
 void sfShader_setTransformParameter(sfShader* shader, const char* name, const sfTransform* transform);
 void sfShader_setTextureParameter(sfShader* shader, const char* name, const sfTexture* texture);
 void sfShader_setCurrentTextureParameter(sfShader* shader, const char* name);
 void sfShader_bind(const sfShader* shader);
 void sfShader_unbind(const sfShader* shader);
 sfBool sfShader_isAvailable(void);
 typedef unsigned int (*sfShapeGetPointCountCallback)(void*);
 typedef sfVector2f (*sfShapeGetPointCallback)(unsigned int, void*);
 sfShape* sfShape_create(sfShapeGetPointCountCallback getPointCount, sfShapeGetPointCallback getPoint, void* userData);
 void sfShape_destroy(sfShape* shape);
 void sfShape_setPosition(sfShape* shape, sfVector2f position);
 void sfShape_setRotation(sfShape* shape, float angle);
 void sfShape_setScale(sfShape* shape, sfVector2f scale);
 void sfShape_setOrigin(sfShape* shape, sfVector2f origin);
 sfVector2f sfShape_getPosition(const sfShape* shape);
 float sfShape_getRotation(const sfShape* shape);
 sfVector2f sfShape_getScale(const sfShape* shape);
 sfVector2f sfShape_getOrigin(const sfShape* shape);
 void sfShape_move(sfShape* shape, sfVector2f offset);
 void sfShape_rotate(sfShape* shape, float angle);
 void sfShape_scale(sfShape* shape, sfVector2f factors);
 const sfTransform* sfShape_getTransform(const sfShape* shape);
 const sfTransform* sfShape_getInverseTransform(const sfShape* shape);
 void sfShape_setTexture(sfShape* shape, const sfTexture* texture, sfBool resetRect);
 void sfShape_setTextureRect(sfShape* shape, sfIntRect rect);
 void sfShape_setFillColor(sfShape* shape, sfColor color);
 void sfShape_setOutlineColor(sfShape* shape, sfColor color);
 void sfShape_setOutlineThickness(sfShape* shape, float thickness);
 const sfTexture* sfShape_getTexture(const sfShape* shape);
 sfIntRect sfShape_getTextureRect(const sfShape* shape);
 sfColor sfShape_getFillColor(const sfShape* shape);
 sfColor sfShape_getOutlineColor(const sfShape* shape);
 float sfShape_getOutlineThickness(const sfShape* shape);
 unsigned int sfShape_getPointCount(const sfShape* shape);
 sfVector2f sfShape_getPoint(const sfShape* shape, unsigned int index);
 sfFloatRect sfShape_getLocalBounds(const sfShape* shape);
 sfFloatRect sfShape_getGlobalBounds(const sfShape* shape);
 void sfShape_update(sfShape* shape);
 typedef enum { sfTextRegular = 0, sfTextBold = 1 << 0, sfTextItalic = 1 << 1, sfTextUnderlined = 1 << 2 } sfTextStyle;
 sfText* sfText_create(void);
 sfText* sfText_copy(sfText* text);
 void sfText_destroy(sfText* text);
 void sfText_setPosition(sfText* text, sfVector2f position);
 void sfText_setRotation(sfText* text, float angle);
 void sfText_setScale(sfText* text, sfVector2f scale);
 void sfText_setOrigin(sfText* text, sfVector2f origin);
 sfVector2f sfText_getPosition(const sfText* text);
 float sfText_getRotation(const sfText* text);
 sfVector2f sfText_getScale(const sfText* text);
 sfVector2f sfText_getOrigin(const sfText* text);
 void sfText_move(sfText* text, sfVector2f offset);
 void sfText_rotate(sfText* text, float angle);
 void sfText_scale(sfText* text, sfVector2f factors);
 const sfTransform* sfText_getTransform(const sfText* text);
 const sfTransform* sfText_getInverseTransform(const sfText* text);
 void sfText_setString(sfText* text, const char* string);
 void sfText_setUnicodeString(sfText* text, const sfUint32* string);
 void sfText_setFont(sfText* text, const sfFont* font);
 void sfText_setCharacterSize(sfText* text, unsigned int size);
 void sfText_setStyle(sfText* text, sfUint32 style);
 void sfText_setColor(sfText* text, sfColor color);
 const char* sfText_getString(const sfText* text);
 const sfUint32* sfText_getUnicodeString(const sfText* text);
 const sfFont* sfText_getFont(const sfText* text);
 unsigned int sfText_getCharacterSize(const sfText* text);
 sfUint32 sfText_getStyle(const sfText* text);
 sfColor sfText_getColor(const sfText* text);
 sfVector2f sfText_findCharacterPos(const sfText* text, size_t index);
 sfFloatRect sfText_getLocalBounds(const sfText* text);
 sfFloatRect sfText_getGlobalBounds(const sfText* text);
 sfTexture* sfTexture_create(unsigned int width, unsigned int height);
 sfTexture* sfTexture_createFromFile(const char* filename, const sfIntRect* area);
 sfTexture* sfTexture_createFromMemory(const void* data, size_t sizeInBytes, const sfIntRect* area);
 sfTexture* sfTexture_createFromStream(sfInputStream* stream, const sfIntRect* area);
 sfTexture* sfTexture_createFromImage(const sfImage* image, const sfIntRect* area);
 sfTexture* sfTexture_copy(sfTexture* texture);
 void sfTexture_destroy(sfTexture* texture);
 sfVector2u sfTexture_getSize(const sfTexture* texture);
 sfImage* sfTexture_copyToImage(const sfTexture* texture);
 void sfTexture_updateFromPixels(sfTexture* texture, const sfUint8* pixels, unsigned int width, unsigned int height, unsigned int x, unsigned int y);
 void sfTexture_updateFromImage(sfTexture* texture, const sfImage* image, unsigned int x, unsigned int y);
 void sfTexture_updateFromWindow(sfTexture* texture, const sfWindow* window, unsigned int x, unsigned int y);
 void sfTexture_updateFromRenderWindow(sfTexture* texture, const sfRenderWindow* renderWindow, unsigned int x, unsigned int y);
 void sfTexture_bind(const sfTexture* texture);
 void sfTexture_setSmooth(sfTexture* texture, sfBool smooth);
 sfBool sfTexture_isSmooth(const sfTexture* texture);
 void sfTexture_setRepeated(sfTexture* texture, sfBool repeated);
 sfBool sfTexture_isRepeated(const sfTexture* texture);
 unsigned int sfTexture_getMaximumSize();
 sfTransform* sfTransform_create(void);
 sfTransform* sfTransform_createFromMatrix(float a00, float a01, float a02, float a10, float a11, float a12, float a20, float a21, float a22);
 sfTransform* sfTransform_copy(sfTransform* transform);
 void sfTransform_destroy(sfTransform* transform);
 const float* sfTransform_getMatrix(const sfTransform* transform);
 void sfTransform_getInverse(const sfTransform* transform, sfTransform* result);
 sfVector2f sfTransform_transformPoint(const sfTransform* transform, sfVector2f point);
 sfFloatRect sfTransform_transformRect(const sfTransform* transform, sfFloatRect rectangle);
 void sfTransform_combine(sfTransform* transform, const sfTransform* other);
 void sfTransform_translate(sfTransform* transform, float x, float y);
 void sfTransform_rotate(sfTransform* transform, float angle);
 void sfTransform_rotateWithCenter(sfTransform* transform, float angle, float centerX, float centerY);
 void sfTransform_scale(sfTransform* transform, float scaleX, float scaleY);
 void sfTransform_scaleWithCenter(sfTransform* transform, float scaleX, float scaleY, float centerX, float centerY);
 sfTransformable* sfTransformable_create(void);
 sfTransformable* sfTransformable_copy(sfTransformable* transformable);
 void sfTransformable_destroy(sfTransformable* transformable);
 void sfTransformable_setPosition(sfTransformable* transformable, sfVector2f position);
 void sfTransformable_setRotation(sfTransformable* transformable, float angle);
 void sfTransformable_setScale(sfTransformable* transformable, sfVector2f scale);
 void sfTransformable_setOrigin(sfTransformable* transformable, sfVector2f origin);
 sfVector2f sfTransformable_getPosition(const sfTransformable* transformable);
 float sfTransformable_getRotation(const sfTransformable* transformable);
 sfVector2f sfTransformable_getScale(const sfTransformable* transformable);
 sfVector2f sfTransformable_getOrigin(const sfTransformable* transformable);
 void sfTransformable_move(sfTransformable* transformable, sfVector2f offset);
 void sfTransformable_rotate(sfTransformable* transformable, float angle);
 void sfTransformable_scale(sfTransformable* transformable, sfVector2f factors);
 const sfTransform* sfTransformable_getTransform(const sfTransformable* transformable);
 const sfTransform* sfTransformable_getInverseTransform(const sfTransformable* transformable);
 sfVertexArray* sfVertexArray_create(void);
 sfVertexArray* sfVertexArray_copy(sfVertexArray* vertexArray);
 void sfVertexArray_destroy(sfVertexArray* vertexArray);
 unsigned int sfVertexArray_getVertexCount(const sfVertexArray* vertexArray);
 sfVertex* sfVertexArray_getVertex(sfVertexArray* vertexArray, unsigned int index);
 void sfVertexArray_clear(sfVertexArray* vertexArray);
 void sfVertexArray_resize(sfVertexArray* vertexArray, unsigned int vertexCount);
 void sfVertexArray_append(sfVertexArray* vertexArray, sfVertex vertex);
 void sfVertexArray_setPrimitiveType(sfVertexArray* vertexArray, sfPrimitiveType type);
 sfPrimitiveType sfVertexArray_getPrimitiveType(sfVertexArray* vertexArray);
 sfFloatRect sfVertexArray_getBounds(sfVertexArray* vertexArray);
 sfView* sfView_create(void);
 sfView* sfView_createFromRect(sfFloatRect rectangle);
 sfView* sfView_copy(sfView* view);
 void sfView_destroy(sfView* view);
 void sfView_setCenter(sfView* view, sfVector2f center);
 void sfView_setSize(sfView* view, sfVector2f size);
 void sfView_setRotation(sfView* view, float angle);
 void sfView_setViewport(sfView* view, sfFloatRect viewport);
 void sfView_reset(sfView* view, sfFloatRect rectangle);
 sfVector2f sfView_getCenter(const sfView* view);
 sfVector2f sfView_getSize(const sfView* view);
 float sfView_getRotation(const sfView* view);
 sfFloatRect sfView_getViewport(const sfView* view);
 void sfView_move(sfView* view, sfVector2f offset);
 void sfView_rotate(sfView* view, float angle);
 void sfView_zoom(sfView* view, float factor);
 sfSprite* sfSprite_create(void);
 sfSprite* sfSprite_copy(sfSprite* sprite);
 void sfSprite_destroy(sfSprite* sprite);
 void sfSprite_setPosition(sfSprite* sprite, sfVector2f position);
 void sfSprite_setRotation(sfSprite* sprite, float angle);
 void sfSprite_setScale(sfSprite* sprite, sfVector2f scale);
 void sfSprite_setOrigin(sfSprite* sprite, sfVector2f origin);
 sfVector2f sfSprite_getPosition(const sfSprite* sprite);
 float sfSprite_getRotation(const sfSprite* sprite);
 sfVector2f sfSprite_getScale(const sfSprite* sprite);
 sfVector2f sfSprite_getOrigin(const sfSprite* sprite);
 void sfSprite_move(sfSprite* sprite, sfVector2f offset);
 void sfSprite_rotate(sfSprite* sprite, float angle);
 void sfSprite_scale(sfSprite* sprite, sfVector2f factors);
 const sfTransform* sfSprite_getTransform(const sfSprite* sprite);
 const sfTransform* sfSprite_getInverseTransform(const sfSprite* sprite);
 void sfSprite_setTexture(sfSprite* sprite, const sfTexture* texture, sfBool resetRect);
 void sfSprite_setTextureRect(sfSprite* sprite, sfIntRect rectangle);
 void sfSprite_setColor(sfSprite* sprite, sfColor color);
 const sfTexture* sfSprite_getTexture(const sfSprite* sprite);
 sfIntRect sfSprite_getTextureRect(const sfSprite* sprite);
 sfColor sfSprite_getColor(const sfSprite* sprite);
 sfFloatRect sfSprite_getLocalBounds(const sfSprite* sprite);
 sfFloatRect sfSprite_getGlobalBounds(const sfSprite* sprite);
 