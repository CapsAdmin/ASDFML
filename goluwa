#!/bin/sh

script_path=$(which "$0")

if [ -L "$script_path" ]; then
    cd "$(dirname "$(readlink -f "$script_path")")" || exit
else
    cd "$(dirname "$script_path")" || exit
fi

mkdir -p data/bin

download () {
    if command -v wget >/dev/null 2>&1; then
        wget -O "$2" "$1"
    elif command -v curl >/dev/null 2>&1; then
        curl -L --url "$1" --output "$2"
    else
        echo "unable to find wget or curl"
        exit 1
    fi
}

case $(uname -m) in
	x86_64)
		ARCH=x64
	;;
	i[36]86)
		ARCH=x86
	;;
	arm*)
		ARCH=arm
	;;
esac

case $(uname) in
	Darwin)
		OS=osx
	;;
	*)
		OS=linux
	;;
esac

if [ "$1" = "update" ] || [ ! -d "./core/" ]; then

	if [ -d .git ]; then
		git pull
	else
		download "https://github.com/CapsAdmin/goluwa/archive/master.tar.gz" "temp.tar.gz"
		tar -xvzf temp.tar.gz
		cp -r goluwa-master/* .
		rm temp.tar.gz
		rm -rf goluwa-master
	fi

	if [ "$1" = "update" ]; then
		exit 1
	fi
fi

if [ "$1" = "build" ]; then
	cd framework/lua/build/ || exit

	if [ "$2" = "all" ]; then

		cd luajit || exit
			make
		cd ..

		for dir in ./*; do
			if [ -d "${dir}" ]; then
				cd "${dir}" || exit
					make &
				cd ..
			fi
		done

		exit 0
	elif [ "$2" = "clean" ]; then
		for dir in ./*; do
			if [ -d "${dir}" ]; then
				cd "${dir}" || exit
					make clean
				cd ..
			fi
		done
	else
		cd "$2" || exit

		if [ "$3" = "clean" ]; then
			make clean
		else
			make ARGS="$3"
		fi
		exit 0
	fi
fi

if [ "$1" = "tmux" ]; then
	if ! command -v tmux>/dev/null; then
		echo "tmux is not installed"
	fi

	if ! tmux has-session -t goluwa 2>/dev/null; then
		tmux new-session -d -s goluwa
		tmux send-keys -t goluwa "export GOLUWA_TMUX=1" C-m
		tmux send-keys -t goluwa "./goluwa launch" C-m
	fi

	tmux attach-session -t goluwa

	exit
fi

if [ "$2" = "attach" ] && tmux has-session -t goluwa 2>/dev/null; then
	tmux attach-session -t goluwa
fi

#if there is no display server just launch client
if [ "$1" != "launch" ]; then
	if [ "$1" = "" ]; then
		if [ -z ${DISPLAY+x} ]; then
			CLIENT=1
		elif [ "$1" = "ide" ] || [ -f "engine/lua/zerobrane/config.lua" ]; then
			IDE=1
		fi
	elif tmux has-session -t goluwa 2>/dev/null; then
		if [ "$1" = "attach" ] || [ "$1" = "tmux" ]; then
			tmux attach -t goluwa
		elif [ "$1" != "launch" ]; then
			prev="$(cat ./data/tmux_log.txt)"

			magic="tmux_execute_$(date +%s%N)"

			tmux send-keys -t goluwa "$*" C-m
			tmux send-keys -t goluwa "echo $magic" C-m

			while :; do
				if grep -F -q "$magic" < ./data/tmux_log.txt; then
					break
				fi
			done

			cur="$(cat ./data/tmux_log.txt)"

			argline="$*"
			len1=$(( ${#prev}+5+${#argline} ))
			len2=$(( ${#cur}-${#magic}-len1 ))

            printf "%s\\n" "$(awk ' END { printf substr(str,'$len1','$len2') }' "str=$cur" /dev/null)"
		fi

		exit
	fi
fi

if [ -n "$IDE" ]; then
	if command -v git >/dev/null 2>&1; then
		if [ -d ./data/ide ]; then
			git -C ./data/ide pull;
		else
			git clone https://github.com/pkulchenko/ZeroBraneStudio.git data/ide --depth 1;
		fi
	else
		download "https://github.com/pkulchenko/ZeroBraneStudio/archive/master.tar.gz" "temp.tar.gz"
		mkdir -p data/ide
		tar -xvzf temp.tar.gz -C "data/ide/"
		mv ide/ZeroBraneStudio-master/* data/ide/
		rm -rf ZeroBraneStudio-master
		rm temp.tar.gz
	fi

	cd data/ide || exit
	./zbstudio.sh -cfg ../../engine/lua/zerobrane/config.lua

	exit 0
fi

if [ -n "$CLIENT" ] || [ "$1" = "client" ]; then
	export GOLUWA_CLIENT=1
	export GOLUWA_SERVER=0

	export LD_PRELOAD="libpthread.so.0"
	export __GL_THREADED_OPTIMIZATIONS=1
	export multithread_glsl_compiler=1
fi

if [ "$1" = "server" ]; then
	export GOLUWA_GRAPHICS=0
	export GOLUWA_SOUND=0
	export GOLUWA_WINDOW=0

	export GOLUWA_SERVER=1
	export GOLUWA_CLIENT=0
fi

if [ "$1" = "client" ] || [ "$1" = "server" ] || [ "$1" = "launch" ] || [ "$1" = "cli" ]; then
    if [ "$2" = "branch" ]; then
        if [ "$4" = "debug" ]; then
            ARGS="$5 $6 $7 $8 $9"
        else
            ARGS="$4 $5 $6 $7 $8 $9"
        fi
    else
        ARGS="$2 $3 $4 $5 $6 $7 $8 $9"
    fi
else
	ARGS="$*"
fi

if [ "$1" = "cli" ]; then
	export GOLUWA_CLI=1
fi

export GOLUWA_ARGS="${GOLUWA_ARGS:-$ARGS}"

#if we don't have binaries get them from github
if [ ! -f "data/bin/${OS}_${ARCH}/binaries_downloaded" ]; then
	mkdir -p "data/bin/${OS}_${ARCH}"
	while true; do
		download "https://github.com/CapsAdmin/goluwa/releases/download/${OS}-binaries/${ARCH}.tar.gz" "temp.tar.gz"
		if [ $? = 0 ]; then
			tar -xvzf temp.tar.gz -C "data/bin/${OS}_${ARCH}/"
			if [ ! $? = 0 ]; then
				rm temp.tar.gz
				echo "zip file is maybe corrupt. trying again"
			else
				rm temp.tar.gz
				break
			fi
		else
			echo "unable to download binaries. trying again"
		fi
	done
	touch data/bin/${OS}_${ARCH}/binaries_downloaded
fi

cd "data/bin/${OS}_${ARCH}/" || exit

#lookup shared libraries in "goluwa/data/bin/linux_${ARCH}/" first
export LD_LIBRARY_PATH=".:$LD_LIBRARY_PATH"

initlua="../../../core/lua/init.lua"

GOLUWA_EXECUTABLE="${GOLUWA_EXECUTABLE:-luajit}"

if [ "$2" = "branch" ]; then
	GOLUWA_EXECUTABLE="luajit_$3"
fi

if [ ! -z "$GOLUWA_DEBUG" ] || [ "$4" = "debug" ]; then
    utils_path="$(dirname $( cd "$(dirname "$0")" ; pwd -P ))/${OS}_${ARCH}/openresty-gdb-utils"
    if [ ! -d $utils_path ]; then
        git clone https://github.com/openresty/openresty-gdb-utils.git $utils_path --depth 1;
    fi


	gdb_exec_line="gdb --ex 'py import sys' --ex 'py sys.path.append(\"$utils_path\")' --ex 'source openresty-gdb-utils/luajit21.py' --ex 'set non-stop off' --ex 'target remote | vgdb' --ex 'monitor leak_check' --ex 'run' --args $GOLUWA_EXECUTABLE $initlua"
	valgrind_exec_line="valgrind --vgdb=yes --vgdb-error=0 --tool=memcheck --leak-check=full --leak-resolution=high --show-reachable=yes --read-var-info=yes --suppressions=lj.supp ./$GOLUWA_EXECUTABLE $initlua"

	x-terminal-emulator --hold -e "$valgrind_exec_line" &
	x-terminal-emulator --hold -e "$gdb_exec_line"

else
	eval "./$GOLUWA_EXECUTABLE $initlua"
fi

if [ ! -x "$GOLUWA_EXECUTABLE" ] && [ -f "/lib64/ld-linux-x86-64.so.2" ]; then
	# i don't know if this is stupid or not
	# but it's so i can execute luajt without the need for execute permissions
	# on a non ext filesystem (like on a usb stick with fat32)
	eval "/lib64/ld-linux-x86-64.so.2 ./$GOLUWA_EXECUTABLE $initlua"
fi

#in case of a crash
stty sane > /dev/null 2>&1 &
