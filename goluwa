#!/bin/sh
case $(uname -m) in x86_64) ARCH=x64;; i[36]86) ARCH=x86;; arm*) ARCH=arm;; esac
case $(uname) in Darwin) OS=osx;; *) OS=linux;; esac
APP_NAME="appexample"
ARG_LINE="$*"
STORAGE_PATH="storage"
BINARY_DIR="$STORAGE_PATH/bin/${OS}_${ARCH}"
BINARY_NAME="luajit"
URL="https://gitlab.com/CapsAdmin/goluwa-binaries-${OS}_${ARCH}/raw/master/$BINARY_NAME"
BASE_SCRIPT_URL="https://gitlab.com/CapsAdmin/goluwa/raw/master/"
SCRIPT_DIR="core/lua"
SCRIPT_PATH="$SCRIPT_DIR/boot.lua"

ZERO_ARG="$0"

if [ "$OS" = osx ] && [[ $ZERO_ARG =~ /Users/* ]]; then
	RAN_FROM_FILEBROWSER=1
fi

if [ "$OS" = linux ] && [ ! -t 1 ]; then
	RAN_FROM_FILEBROWSER=1
fi

Main() {
	GetLua "$URL" "$BINARY_DIR" "$BINARY_NAME"
    #CompileLua "https://github.com/LuaJIT/LuaJIT/archive/v2.1.tar.gz" "$BINARY_DIR" "$BINARY_NAME"
    
	executable_path="$BINARY_DIR/$BINARY_NAME $SCRIPT_PATH"
	
	if [ ! -f "$SCRIPT_PATH" ]; then
        mkdir -p "$SCRIPT_DIR"	
        DownloadFile "$BASE_SCRIPT_URL$SCRIPT_PATH" "$SCRIPT_PATH"
	fi

	export "GOLUWA_STORAGE_PATH=$STORAGE_PATH"
	export "GOLUWA_ARG_LINE=$ARG_LINE"
	export "GOLUWA_SCRIPT_PATH=$SCRIPT_PATH"
	export "GOLUWA_RAN_FROM_FILEBROWSER=$RAN_FROM_FILEBROWSER"
	export "GOLUWA_BINARY_DIR=$BINARY_DIR"

	if [ "$RAN_FROM_FILEBROWSER" = 1 ]; then
		clear
		$executable_path
		exit_code=$?

		if [ $exit_code -ne 0 ]; then
			AlertBox "$SCRIPT_PATH exited with code $exit_code" "error"
			exit 1
		fi
		if [ "$OS" = osx ]; then
			osascript -e 'tell application "Terminal" to quit' & exit
		fi
	else
		$executable_path
	fi
}

CompileLua() {
	url="$1"
	directory="$2"
	filename="$3"

	DownloadFile "$url" "temp.tar.gz"

	mkdir "./temp" 2>/dev/null
	tar -xvzf "./temp.tar.gz" -C "./temp"
	rm "./temp.tar.gz"

	make amalg -C temp/*/

	mkdir -p "$directory"

	cp temp/*/src/luajit "$directory/$filename"
	rm -rf "./temp"

	path="$directory/$filename"

	ValidateLua "$path"
	status=$?

	if [ $status -eq 0 ]; then
		echo "validation successful"
		touch "$directory/lua_downloaded_and_validated"
	fi

}

GetLua() {
	url="$1"
	directory="$2"
	filename="$3"

	if [ -f "$directory/lua_downloaded_and_validated" ]; then return; fi

	path="$directory/$filename"
	mkdir -p "$directory"

	DownloadFile "$url" "$path"

	ValidateLua "$path"
	status=$?

	if [ $status -eq 0 ]; then
		echo "validation successful"
		touch "$directory/lua_downloaded_and_validated"
	else
		echo "exit code 'os.exit(0)' does not match $status"
		if command -v gcc >/dev/null 2>&1 && command -v make >/dev/null 2>&1; then
			echo "attempting to compile luajit.."
			CompileLuaJIT "https://github.com/LuaJIT/LuaJIT/archive/v2.1.tar.gz" "$directory" "$filename"
		fi
	fi
}

ValidateLua() {
	path="$1"

	echo "validating $path .. "
	chmod +x "$path"
	$path -e "os.exit(0)"
	return $?
}

DownloadFile () {
	url="$1"
	output_path="$2"
	
	echo "downloading $url to $output_path"

	if command -v wget >/dev/null 2>&1; then
		wget -O "$output_path" "$url"
		error_code=$?
	elif command -v curl >/dev/null 2>&1; then
		curl -L --url "$url" --output "$output_path"
		error_code=$?
	else
		AlertBox "unable to find wget or curl" "error"
		exit 1
	fi

	if [ $error_code -ne 0 ]; then
		AlertBox "wget or curl failed with exit code $error_code" "error"
		rm "$output_path"
		exit 1
	fi
}

AlertBox() {
	msg=$1
	title=$2
	if [ "$OS" = osx ]; then
		osascript -e "tell app \"System Events\" to display dialog \"$msg\" with title \"$title\""
	else
		echo "$msg" | xmessage -nearmouse -title "$title" -file -
	fi
}

realpath() {
	OURPWD=$PWD
	cd "$(dirname "$1")"
	LINK=$(readlink "$(basename "$1")")
	while [ "$LINK" ]; do
		cd "$(dirname "$LINK")"
		LINK=$(readlink "$(basename "$1")")
	done
	REALPATH="$PWD/$(basename "$1")"
	cd "$OURPWD"
	echo "$REALPATH"
}

Main

exit 0
