 typedef struct { char address[16];
 } sfIpAddress;
 sfIpAddress sfIpAddress_None;
 sfIpAddress sfIpAddress_LocalHost;
 sfIpAddress sfIpAddress_Broadcast;
 sfIpAddress sfIpAddress_fromString(const char* address);
 sfIpAddress sfIpAddress_fromBytes(sfUint8 byte0, sfUint8 byte1, sfUint8 byte2, sfUint8 byte3);
 sfIpAddress sfIpAddress_fromInteger(sfUint32 address);
 void sfIpAddress_toString(sfIpAddress address, char* string);
 sfUint32 sfIpAddress_toInteger(sfIpAddress address);
 sfIpAddress sfIpAddress_getLocalAddress(void);
 sfIpAddress sfIpAddress_getPublicAddress(sfTime timeout);
 typedef struct sfFtpDirectoryResponse sfFtpDirectoryResponse;
 typedef struct sfFtpListingResponse sfFtpListingResponse;
 typedef struct sfFtpResponse sfFtpResponse;
 typedef struct sfFtp sfFtp;
 typedef struct sfHttpRequest sfHttpRequest;
 typedef struct sfHttpResponse sfHttpResponse;
 typedef struct sfHttp sfHttp;
 typedef struct sfPacket sfPacket;
 typedef struct sfSocketSelector sfSocketSelector;
 typedef struct sfTcpListener sfTcpListener;
 typedef struct sfTcpSocket sfTcpSocket;
 typedef struct sfUdpSocket sfUdpSocket;
 sfPacket* sfPacket_create(void);
 sfPacket* sfPacket_copy(sfPacket* packet);
 void sfPacket_destroy(sfPacket* packet);
 void sfPacket_append(sfPacket* packet, const void* data, size_t sizeInBytes);
 void sfPacket_clear(sfPacket* packet);
 const void* sfPacket_getData(const sfPacket* packet);
 size_t sfPacket_getDataSize(const sfPacket* packet);
 sfBool sfPacket_endOfPacket(const sfPacket* packet);
 sfBool sfPacket_canRead(const sfPacket* packet);
 sfBool sfPacket_readBool(sfPacket* packet);
 sfInt8 sfPacket_readInt8(sfPacket* packet);
 sfUint8 sfPacket_readUint8(sfPacket* packet);
 sfInt16 sfPacket_readInt16(sfPacket* packet);
 sfUint16 sfPacket_readUint16(sfPacket* packet);
 sfInt32 sfPacket_readInt32(sfPacket* packet);
 sfUint32 sfPacket_readUint32(sfPacket* packet);
 float sfPacket_readFloat(sfPacket* packet);
 double sfPacket_readDouble(sfPacket* packet);
 void sfPacket_readString(sfPacket* packet, char* string);
 void sfPacket_readWideString(sfPacket* packet, wchar_t* string);
 void sfPacket_writeBool(sfPacket* packet, sfBool);
 void sfPacket_writeInt8(sfPacket* packet, sfInt8);
 void sfPacket_writeUint8(sfPacket* packet, sfUint8);
 void sfPacket_writeInt16(sfPacket* packet, sfInt16);
 void sfPacket_writeUint16(sfPacket* packet, sfUint16);
 void sfPacket_writeInt32(sfPacket* packet, sfInt32);
 void sfPacket_writeUint32(sfPacket* packet, sfUint32);
 void sfPacket_writeFloat(sfPacket* packet, float);
 void sfPacket_writeDouble(sfPacket* packet, double);
 void sfPacket_writeString(sfPacket* packet, const char* string);
 void sfPacket_writeWideString(sfPacket* packet, const wchar_t* string);
 sfSocketSelector* sfSocketSelector_create(void);
 sfSocketSelector* sfSocketSelector_copy(sfSocketSelector* selector);
 void sfSocketSelector_destroy(sfSocketSelector* selector);
 void sfSocketSelector_addTcpListener(sfSocketSelector* selector, sfTcpListener* socket);
 void sfSocketSelector_addTcpSocket(sfSocketSelector* selector, sfTcpSocket* socket);
 void sfSocketSelector_addUdpSocket(sfSocketSelector* selector, sfUdpSocket* socket);
 void sfSocketSelector_removeTcpListener(sfSocketSelector* selector, sfTcpListener* socket);
 void sfSocketSelector_removeTcpSocket(sfSocketSelector* selector, sfTcpSocket* socket);
 void sfSocketSelector_removeUdpSocket(sfSocketSelector* selector, sfUdpSocket* socket);
 void sfSocketSelector_clear(sfSocketSelector* selector);
 sfBool sfSocketSelector_wait(sfSocketSelector* selector, sfTime timeout);
 sfBool sfSocketSelector_isTcpListenerReady(const sfSocketSelector* selector, sfTcpListener* socket);
 sfBool sfSocketSelector_isTcpSocketReady(const sfSocketSelector* selector, sfTcpSocket* socket);
 sfBool sfSocketSelector_isUdpSocketReady(const sfSocketSelector* selector, sfUdpSocket* socket);
 typedef enum { sfSocketDone, sfSocketNotReady, sfSocketDisconnected, sfSocketError } sfSocketStatus;
 sfTcpListener* sfTcpListener_create(void);
 void sfTcpListener_destroy(sfTcpListener* listener);
 void sfTcpListener_setBlocking(sfTcpListener* listener, sfBool blocking);
 sfBool sfTcpListener_isBlocking(const sfTcpListener* listener);
 unsigned short sfTcpListener_getLocalPort(const sfTcpListener* listener);
 sfSocketStatus sfTcpListener_listen(sfTcpListener* listener, unsigned short port);
 sfSocketStatus sfTcpListener_accept(sfTcpListener* listener, sfTcpSocket** connected);
 sfTcpSocket* sfTcpSocket_create(void);
 void sfTcpSocket_destroy(sfTcpSocket* socket);
 void sfTcpSocket_setBlocking(sfTcpSocket* socket, sfBool blocking);
 sfBool sfTcpSocket_isBlocking(const sfTcpSocket* socket);
 unsigned short sfTcpSocket_getLocalPort(const sfTcpSocket* socket);
 sfIpAddress sfTcpSocket_getRemoteAddress(const sfTcpSocket* socket);
 unsigned short sfTcpSocket_getRemotePort(const sfTcpSocket* socket);
 sfSocketStatus sfTcpSocket_connect(sfTcpSocket* socket, sfIpAddress host, unsigned short port, sfTime timeout);
 void sfTcpSocket_disconnect(sfTcpSocket* socket);
 sfSocketStatus sfTcpSocket_send(sfTcpSocket* socket, const void* data, size_t size);
 sfSocketStatus sfTcpSocket_receive(sfTcpSocket* socket, void* data, size_t maxSize, size_t* sizeReceived);
 sfSocketStatus sfTcpSocket_sendPacket(sfTcpSocket* socket, sfPacket* packet);
 sfSocketStatus sfTcpSocket_receivePacket(sfTcpSocket* socket, sfPacket* packet);
 sfUdpSocket* sfUdpSocket_create(void);
 void sfUdpSocket_destroy(sfUdpSocket* socket);
 void sfUdpSocket_setBlocking(sfUdpSocket* socket, sfBool blocking);
 sfBool sfUdpSocket_isBlocking(const sfUdpSocket* socket);
 unsigned short sfUdpSocket_getLocalPort(const sfUdpSocket* socket);
 sfSocketStatus sfUdpSocket_bind(sfUdpSocket* socket, unsigned short port);
 void sfUdpSocket_Unbind(sfUdpSocket* socket);
 sfSocketStatus sfUdpSocket_send(sfUdpSocket* socket, const void* data, size_t size, sfIpAddress address, unsigned short port);
 sfSocketStatus sfUdpSocket_receive(sfUdpSocket* socket, void* data, size_t maxSize, size_t* sizeReceived, sfIpAddress* address, unsigned short* port);
 sfSocketStatus sfUdpSocket_sendPacket(sfUdpSocket* socket, sfPacket* packet, sfIpAddress address, unsigned short port);
 sfSocketStatus sfUdpSocket_receivePacket(sfUdpSocket* socket, sfPacket* packet, sfIpAddress* address, unsigned short* port);
 unsigned int sfUdpSocket_maxDatagramSize();
 